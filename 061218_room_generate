
import random

class Enemy:
    
    ###enemy class defines an enemy with a name, statistics, and hitpoints and a score value which will contribute to the players score for the game
   
    def __init__(self, title, atk, dfc, matk, mdfc, hitpoints):
        
        self.title = title
        self.atk = atk
        self.dfc = dfc
        self.matk = matk
        self.mdfc = mdfc
        self.hitpoints = hitpoints
        
    def __str__(self):
        
        if self.title == 'no enemy':
            print('there is no enemy')
        else:
            print(f'you are faced with a {self.title} which has {self.hitpoints} hitpoints')
            
            
weak1 = Enemy('weak1', 2, 1, 6, 5, 50)
weak2 = Enemy('weak2', 6, 5, 2, 1, 60)
weak3 = Enemy('weak3', 3, 4, 2, 2, 30)

mid1 = Enemy('mid1', 10, 12, 6, 5, 100)
mid2 = Enemy('mid2', 5, 5, 15, 12, 90)
mid3 = Enemy('mid3', 10, 10, 10, 10, 100)

hi1 = Enemy('hi1', 20, 25, 10, 10, 140)
hi2 = Enemy('hi2', 10, 10, 25, 18, 160)
hi3 = Enemy('hi3', 20, 20, 20, 20, 150)

tier1_enemy = [weak1, weak2, weak3]
tier2_enemy = [mid1, mid2, mid3]
tier3_enemy = [hi1, hi2, hi3]

def enemy_generator(level):
    
    global tier1_enemy
    global tier2_enemy
    global tier3_enemy
    
    if 0 < level < 20:
        enemy = random.choice(tier1_enemy)
    elif 20 <= level < 40:
        enemy = random.choice(tier2_enemy)
    elif 40 <= level < 60:
        enemy = random.choice(tier3_enemy)
    else:
         print('level out of range')
         enemy = tier1_enemy[0]
    
    return enemy

class Door:
    
    def __init__(self):
        
        self.open = False
        
    def __str__(self):
        
        if self.open == False:
            print('the door is not open')
        elif self.open == True:
            print('the door is open. maybe you should walk through')    

#%%

class Chest:
    
    #defines a chest which contains an item and indicates whether it is open or closed
    
    def __init__(self, item):
        
       self.item = item
       self.open = True
       
    def __str__(self):
        
        #prints the status of the chest dependent on whether it is open or closed or contains an item
        
        if self.open == False:
            print('the chest is unopened')
        
        if self.open == True and self.item == 'no_item':#placeholder string
            
            print('the chest is empty')
            
        elif self.open == True and self.item != 'no_item':#placeholder string
            
            print(f'the chest is open. it contains {self.item.title}')        
        
#%%
            
class Potion:
    
    ### an item which, when used, will change one of the players stats by a certain amount
    
    def __init__(self, title, stat, effect):
        ### each potion has a name, a stat which it will change, and an amount that it will change it by
        self.title = title
        self.stat = stat
        self.effect = effect
        
    def __str__(self):
        
        print(f'drinking this potion will have some effect on your {self.stat}')

#%%
        
### defines a new class for items which will be equipped to characters
class Equipment:
    
    ### equipment has a name, a slot to be equipped to, and a set of statistics
    def __init__(self, title, slot, eqtype, atk, dfc, matk, mdfc):
        self.title = title
        self.slot = slot
        self.eqtype = eqtype
        self.atk = atk
        self.dfc = dfc
        self.matk = matk
        self.mdfc = mdfc
    
    def __str__(self):
        print(f'\n{self.title} is a {self.eqtype} to be equipped as a {self.slot}')
        print(f'{self.title} has the following attributes: ')
        print(f'attack: {self.atk}')
        print(f'defense: {self.dfc}')
        print(f'magic attack: {self.matk}')
        print(f'magic defense: {self.mdfc}')

#%%
        
loweq1 = Equipment('loweq1', 'helm', 'helmet', 0, 2, 0, 0)       
loweq2 = Equipment('loweq2', 'armour', 'light armour', 0, 4, 0, 0)
loweq3 = Equipment('loweq3', 'shield', 'round shield', 0, 2, 0, 0)
loweq4 = Equipment('loweq4', 'weapon', 'axe', 5, 0, 0, 0)

mideq1 = Equipment('mideq1', 'shield', 'magic orb', 0, 1, 0, 5)
mideq2 = Equipment('mideq2', 'weapon', 'magic staff', 0, 0, 5, 0)
mideq3 = Equipment('mideq3', 'helm', 'hat', 0, 0, 0, 2)
mideq4 = Equipment('mideq4', 'armour', 'robe', 0, 1, 0, 4)

hieq1 = Equipment('hieq1', 'helm', 'helmet', 0, 3, 0, 1)
hieq2 = Equipment('hieq2', 'armour', 'heavy armour', 0, 5, 0, 2)
hieq3 = Equipment('hieq3', 'shield', 'kite shield', 0, 3, 0, 0)
hieq4 = Equipment('hieq4', 'weapon', 'sword', 3, 0, 0, 0)

#%%

lowpot1 = Potion('lowpot1', 'attack', 2)
lowpot2 = Potion('lowpot2', 'attack', 2)
lowpot3 = Potion('lowpot3', 'attack', 2)

midpot1 = Potion('midpot1', 'defence', 1)
midpot2 = Potion('midpot2', 'defence', 1)
midpot3 = Potion('midpot3', 'defence', 1)

hipot1 = Potion('hipot1', 'magic attack', 3)
hipot2 = Potion('hipot2', 'magic attack', 3)
hipot3 = Potion('hipot3', 'magic attack', 3)

#%%

lowitem = {loweq1 : range(0, 1500), loweq2 : range(1500, 3000), loweq3 : range(3000, 4500), loweq4 : range(4500, 6000), lowpot1 : range(6000, 7000), lowpot2 : range(7000, 7500), lowpot3 : range(7500, 8001)}
miditem = {mideq1 : range(0, 2000), mideq2 : range(2000, 4000), mideq3 : range(4000, 5000), mideq4 : range(5000, 5500), midpot1 : range(5500, 7000), midpot2 : range(7000, 7200), midpot3 : range(7200, 8001)}
hiitem = {hieq1 : range(0, 1000), hieq2 : range(1000, 2000), hieq3 : range(2000, 3000), hieq4 : range(3000, 4000), hipot1 : range(4000, 6000), hipot2 : range(6000, 7000), hipot3 : range(7000, 8001)}

#%%

def item_generator(level, seed):
    
    global lowitem
    global miditem
    global hiitem
    
    if 0 < level < 20:
        for i in lowitem:
            if seed in lowitem[i]:
                item = i
    
    elif 20 <= level < 40:
        for i in miditem:
            if seed in miditem[i]:
                item = i
    
    elif 40 <= level < 60:
        for i in hiitem:
            if seed in hiitem[i]:
                item = i
    return item

#%%
    
class Room:
    
    def __init__(self, enemy, chest, door):
        
        self.enemy = enemy
        self.chest = chest
        self.door = door
        
    def __str__(self):
        
        print('the room has an enemy, a chest and a door')
        
#%%
level = 55
room = Room(enemy_generator(level), Chest(item_generator(level, random.randint(0, 8000),)), Door())

print(room.enemy.title)
print(room.chest.item.title)
room.door.__str__()
